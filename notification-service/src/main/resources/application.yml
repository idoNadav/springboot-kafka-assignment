server:
  port: ${SERVER_PORT:8082}

spring:
  application:
    name: notification-service

  kafka:
    bootstrap-servers: ${SPRING_KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
    listener:
      concurrency: 1
      missing-topics-fatal: false
    consumer:
      group-id: notification-service-Inventory-results-consumer
      auto-offset-reset: earliest
      key-deserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
      properties:
        spring.deserializer.key.delegate.class: org.apache.kafka.common.serialization.StringDeserializer
        spring.deserializer.value.delegate.class: org.springframework.kafka.support.serializer.JsonDeserializer
        spring.json.use.type.headers: true
        spring.json.trusted.packages: com.assignment.commonmodel.model

  data:
    redis:
      host: ${SPRING_DATA_REDIS_HOST:localhost}
      port: ${SPRING_DATA_REDIS_PORT:6379}

app:
  topics:
    inventoryResults: ${APP_TOPICS_INVENTORY_RESULTS:inventory-results}
