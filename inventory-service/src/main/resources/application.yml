server:
  port: ${SERVER_PORT:8081}

spring:
  application:
    name: inventory-service

  kafka:
    bootstrap-servers: ${SPRING_KAFKA_BOOTSTRAP_SERVERS:localhost:9092}

    listener:
      concurrency: 1
      missing-topics-fatal: false

    consumer:
      group-id: inventory-service
      auto-offset-reset: earliest
      key-deserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
      properties:
        spring.deserializer.key.delegate.class: org.apache.kafka.common.serialization.StringDeserializer
        spring.deserializer.value.delegate.class: org.springframework.kafka.support.serializer.JsonDeserializer
        spring.json.use.type.headers: true
        spring.json.trusted.packages: com.assignment.commonmodel.model

    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      properties:
        spring.json.add.type.headers: true
        acks: all
        enable.idempotence: true
        retries: 5
        retry.backoff.ms: 200
        delivery.timeout.ms: 120000
        max.in.flight.requests.per.connection: 5

  data:
    redis:
      host: ${SPRING_REDIS_HOST:localhost}
      port: ${SPRING_REDIS_PORT:6379}

app:
  topics:
    orders: ${APP_TOPICS_ORDERS:orders}
    inventoryResults: ${APP_TOPICS_INVENTORY_RESULTS:inventory-results}

logging:
  level:
    root: INFO
    com.assignment.inventory-service: DEBUG